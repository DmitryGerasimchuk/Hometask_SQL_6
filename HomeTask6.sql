CREATE DATABASE HomeTask6;

USE HomeTask6;

/*
Задание 1:

Создайте таблицу users_old, аналогичную таблице users. 
Создайте процедуру, с помощью которой можно переместить любого (одного) пользователя из таблицы users в таблицу users_old. 
(использование транзакции с выбором commit или rollback – обязательно).
*/

/* 1. Ознакомиться, как выглядит таблица users
Таблица users состоит из следующих столбцов:
- id - идентификационный номер пользователя: принимает только числовое значение,является уникальным, заполняется автоматически и не может быть NULL, является ключом;
- firstname - имя пользователя: текстовое выражение длиной до 50 символов;
- lastname - фамилия пользователя: текстовое выражение длиной до 50 символов;
- email - электронная почта: текстовое выражение длиной до 120 символов, увляется уникальным.

Вывод: на первом этапе нужно создать аналогичную таблицу
*/

-- 2. Создаем таблицу, аналогичную проанализированной:
DROP TABLE IF EXISTS users_old; 	-- Пришлось прописать, так как без этого не работал скрипт
CREATE TABLE users_old (
	id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
    firstname VARCHAR(50),
    lastname VARCHAR(50),
    email VARCHAR(120) UNIQUE
);

SELECT * FROM users_old;

-- 3. Копируем код создания таблицы users и заполнение ее данными, поскольку таблица и данные нам будут нужны для реализации процедуры
DROP TABLE IF EXISTS users; 	-- Пришлось прописать, так как без этого не работал скрипт
CREATE TABLE users ( 	-- Код создания таблицы
	id SERIAL PRIMARY KEY, 
    firstname VARCHAR(50),
    lastname VARCHAR(50) COMMENT 'Фамилия',
    email VARCHAR(120) UNIQUE
);

INSERT INTO users (id, firstname, lastname, email) VALUES  	-- Код заполнения таблицы
(1, 'Reuben', 'Nienow', 'arlo50@example.org'),
(2, 'Frederik', 'Upton', 'terrence.cartwright@example.org'),
(3, 'Unique', 'Windler', 'rupert55@example.org'),
(4, 'Norene', 'West', 'rebekah29@example.net'),
(5, 'Frederick', 'Effertz', 'von.bridget@example.net'),
(6, 'Victoria', 'Medhurst', 'sstehr@example.net'),
(7, 'Austyn', 'Braun', 'itzel.beahan@example.com'),
(8, 'Jaida', 'Kilback', 'johnathan.wisozk@example.com'),
(9, 'Mireya', 'Orn', 'missouri87@example.org'),
(10, 'Jordyn', 'Jerde', 'edach@example.com');

SELECT * FROM users;

-- 4. Описываем процедуру, с помощью которой можно переместить любого (одного) пользователя из таблицы users в таблицу users_old.

DELIMITER // 	-- Устанавливаем верхнюю границу процедуры
CREATE PROCEDURE transfer(u_id INT, 	-- Создаем хранимую процедуру с именем transfer, которая принимает параметр u_id, который может быть только числовым
OUT  transfer_result VARCHAR(50)) 	-- Процедура возвращает результат через параметр transfer_result, который должен быть в формате текста длиной до 50 символов

BEGIN 	-- Начало блока кода процедуры
	
	DECLARE `_rollback` BIT DEFAULT 0; 	-- Обозначаем локальную переменную `_rollback`  типа BIT и устанавливаем ее значение по умолчания равное 0 (сделал как на семинаре)
	DECLARE code VARCHAR(50); 	-- Обозначаем локальную переменную code текстового типа с длиной 50 символов
	DECLARE error VARCHAR(100); 	-- Обозначаем локальную переменную error текстового типа с длиной 50 символов

	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 	-- Объявляем обработчик ошибок типа SQL
	BEGIN 	-- Объявляем начало блока кода для обработчика ошибок
 		SET `_rollback` = 1; 	-- Устанавливаем значение переменной `_rollback` равное 1, что должно указывать на необходимость отката транзакции
 		GET stacked DIAGNOSTICS CONDITION 1
			code = RETURNED_SQLSTATE, error = MESSAGE_TEXT; -- Получаем данные об ошибке (ее код и текст) и сохраняем их в соответствующие переменные
	END; 	-- Объявляем окончание блока кода для обработчика ошибок

	START TRANSACTION; 	-- Начало блока транзакции 
	
    INSERT INTO users_old (id, firstname, lastname, email) -- Заполняем данными созданную таблицу users_old, 
	SELECT id, firstname, lastname, email FROM users WHERE id = u_id; 	-- Перемещая данные из таблицы users в новую созданную таблицу

	DELETE FROM users 	-- После перемешения пользователя из таблицы user
	WHERE id=u_id; 	-- Данные о нем удаляются из таблицы 
     
	IF `_rollback` THEN 	-- Запуск блока проверки ошибки: если переменная равна 1 (произошла ошибка),
		SET transfer_result = concat('Внимание: код ошибки: ', code, ' Текст ошибки: ', error); 	-- Выполяется код, который выводит информацию об ошибке (ее кодл и диагностику)
		ROLLBACK; -- В результате откатывается обратно транзакция
	ELSE 	-- Иначе выполняется другой код
		SET transfer_result = 'Всё хорошо'; 	-- Успешное выполнение транзакции  
		COMMIT; 	 -- Фиксируем текущее значение транзакции 
	END IF; 	 -- Завершает блок проверки условия 
END// 	 -- Обозначаем конец блока кода процедуры 
DELIMITER ; 	-- Устанавливаем нижнюю границу процедуры

-- 5. Запускам процедуру и проверяев ее работу
CALL transfer(1, @transfer_result);
SELECT  @transfer_result; 	 -- Выводит информацию, что все хорошо 
SELECT id, firstname, lastname, email FROM users_old; 	 -- Перемещает первого пользователя из сьарой таблицы в новую 



/*
Задание 2:

Создайте хранимую функцию hello(), которая будет возвращать приветствие, в зависимости от текущего времени суток. 
С 6:00 до 12:00 функция должна возвращать фразу "Доброе утро", 
с 12:00 до 18:00 функция должна возвращать фразу "Добрый день", 
с 18:00 до 00:00 — "Добрый вечер", с 00:00 до 6:00 — "Доброй ночи".
*/

DELIMITER //  	-- Устанавливаем верхнюю границу команды
CREATE FUNCTION hello() 	-- Создаем функцию без параметров
RETURNS TEXT NO SQL 	-- Функция будет возвращать текст (текстовое значение)
BEGIN 	-- Обозначаем начало блока функции
	DECLARE time_now INT; 	 -- Объявляеи локальную переменную time_now, которая должна быть числовой 
	SET time_now = HOUR(now()); 	 -- Устанавливаем значение переменной равной текущему часу (через встроенную функцию)
	CASE 	-- Начало блока условия 
		WHEN time_now BETWEEN 0 AND 5 THEN  	-- Если переменная показывает значение от 0 до 5,
			RETURN 'Доброй ночи!';				-- То выводится следующая фраза 
		WHEN time_now BETWEEN 6 AND 11 THEN 	-- Если переменная показывает значение от 6 до 11,
			RETURN 'Доброе утро!';				-- То выводится следующая фраза 
		WHEN time_now BETWEEN 12 AND 17 THEN 	-- Если переменная показывает значение от 12 до 17,
			RETURN 'Добрый день!';				-- То выводится следующая фраза 
		WHEN time_now BETWEEN 18 AND 23 THEN 	-- Если переменная показывает значение от 18 до 23,
			RETURN 'Добрый вечер!';				-- То выводится следующая фраза 
	END CASE; 	 -- Окончание блокеа условия
END// 	 -- Обозначаем окончание блока функции
DELIMITER ; 	-- Устанавливаем нижнюю границу команды

SELECT hello(); 	-- Вывод функции (у меня сейчас 21:25, поэтому вывелось "Добрый вечер!")
